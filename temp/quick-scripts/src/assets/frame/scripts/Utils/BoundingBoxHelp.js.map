{"version":3,"sources":["assets\\frame\\scripts\\Utils\\BoundingBoxHelp.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\n * Author: kouyaqi\n * Email: kouyaqi@100tal.com\n */\n\nconst { ccclass, property } = cc._decorator;\n\n/**\n * 处理sp.Skeleton的边界框的方法；\n * 将此脚本挂载到含有spine资源的节点；\n * 资源顶点越多，贴合越好，性能越低。\n * */\n@ccclass\nexport default class BoundingBoxHelp extends cc.Component {\n    private skeleton: sp.Skeleton = null;\n\n    /**插槽的顶点数据 */\n    private vertices: number[] = [];\n\n    /**转换得到的坐标 */\n    private positions: cc.Vec2[] = [];\n\n    private getSkeleton() {\n        if (this.skeleton == null) {\n            this.skeleton = this.node.getComponent(sp.Skeleton);\n        }\n        return this.skeleton;\n    }\n\n    /**\n     * 获取插槽所绑定的边界框的世界坐标\n     * @param slotName 插槽名称\n     */\n    public getBoundingBoxWorldPositions(slotName: string): cc.Vec2[] {\n        let skeleton = this.getSkeleton();\n        if (skeleton == null) {\n            console.warn('没有Spine资源！');\n            return this.positions;\n        }\n\n        let boundingBoxSlot = skeleton.findSlot(slotName);\n        if (!boundingBoxSlot) {\n            console.warn(`没有找到插槽： ${slotName}`);\n            return this.positions;\n        }\n\n        let attachment = boundingBoxSlot.attachment;\n        /** http://zh.esotericsoftware.com/spine-api-reference#BoundingBoxAttachment\n         * Transforms the attachment's local vertices to world coordinates. If the slot has attachmentVertices, they are used to deform the vertices.\n         *   See World transforms in the Spine Runtimes Guide.\n         */\n        attachment.computeWorldVertices(boundingBoxSlot, 0, attachment.worldVerticesLength, this.vertices, 0, 2);\n\n        for (let i = 0; i < this.vertices.length; i += 2) {\n            if (!this.positions[i / 2]) {\n                this.positions[i / 2] = cc.Vec2.ZERO;\n            }\n            this.positions[i / 2].x = this.vertices[i];\n            this.positions[i / 2].y = this.vertices[i + 1];\n        }\n\n        //此时的世界坐标是Spine内部的世界坐标，需要转换为Cocos里的世界坐标\n        for (let i = 0; i < this.positions.length; i++) {\n            this.positions[i] = this.node.convertToWorldSpaceAR(this.positions[i]);\n        }\n\n        return this.positions;\n    }\n\n    /**\n     * 获取插槽所绑定的边界框相对于节点的坐标\n     * @param slotName 插槽名称\n     * @param node 相对节点\n     */\n    public getBoundingBoxRelativePositions(slotName: string, node: cc.Node): cc.Vec2[] {\n        let positions = this.getBoundingBoxWorldPositions(slotName);\n        for (let i = 0; i < positions.length; i++) {\n            positions[i] = node.convertToNodeSpaceAR(positions[i]);\n        }\n        return positions;\n    }\n}\n"]}